{"string":"<strong>APPEND</strong> key value<br>\nsummary: Append a value to a key<br>\nsince: 2.0.0 <br>\n<br>\n<strong>BITCOUNT</strong> key [start] [end]<br>\nsummary: Count set bits in a string<br>\nsince: 2.6.0 <br>\n<br>\n<strong>BITOP</strong> operation destkey key [key ...]<br>\nsummary: Perform bitwise operations between strings<br>\nsince: 2.6.0 <br>\n<br>\n<strong>DECR</strong> key<br>\nsummary: Decrement the integer value of a key by one<br>\nsince: 1.0.0 <br>\n<br>\n<strong>DECRBY</strong> key decrement<br>\nsummary: Decrement the integer value of a key by the given number<br>\nsince: 1.0.0 <br>\n<br>\n<strong>GET</strong> key<br>\nsummary: Get the value of a key<br>\nsince: 1.0.0 <br>\n<br>\n<strong>GETBIT</strong> key offset<br>\nsummary: Returns the bit value at offset in the string value stored at key<br>\nsince: 2.2.0 <br>\n<br>\n<strong>GETRANGE</strong> key start end<br>\nsummary: Get a substring of the string stored at a key<br>\nsince: 2.4.0 <br>\n<br>\n<strong>GETSET</strong> key value<br>\nsummary: Set the string value of a key and return its old value<br>\nsince: 1.0.0 <br>\n<br>\n<strong>INCR</strong> key<br>\nsummary: Increment the integer value of a key by one<br>\nsince: 1.0.0 <br>\n<br>\n<strong>INCRBY</strong> key increment<br>\nsummary: Increment the integer value of a key by the given amount<br>\nsince: 1.0.0 <br>\n<br>\n<strong>INCRBYFLOAT</strong> key increment<br>\nsummary: Increment the float value of a key by the given amount<br>\nsince: 2.6.0 <br>\n<br>\n<strong>MGET</strong> key [key ...]<br>\nsummary: Get the values of all the given keys<br>\nsince: 1.0.0 <br>\n<br>\n<strong>MSET</strong> key value [key value ...]<br>\nsummary: Set multiple keys to multiple values<br>\nsince: 1.0.1 <br>\n<br>\n<strong>MSETNX</strong> key value [key value ...]<br>\nsummary: Set multiple keys to multiple values, only if none of the keys exist<br>\nsince: 1.0.1 <br>\n<br>\n<strong>PSETEX</strong> key milliseconds value<br>\nsummary: Set the value and expiration in milliseconds of a key<br>\nsince: 2.6.0 <br>\n<br>\n<strong>SET</strong> key value [EX seconds] [PX milliseconds] [NX|XX]<br>\nsummary: Set the string value of a key<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SETBIT</strong> key offset value<br>\nsummary: Sets or clears the bit at offset in the string value stored at key<br>\nsince: 2.2.0 <br>\n<br>\n<strong>SETEX</strong> key seconds value<br>\nsummary: Set the value and expiration of a key<br>\nsince: 2.0.0 <br>\n<br>\n<strong>SETNX</strong> key value<br>\nsummary: Set the value of a key, only if the key does not exist<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SETRANGE</strong> key offset value<br>\nsummary: Overwrite part of a string at key starting at the specified offset<br>\nsince: 2.2.0 <br>\n<br>\n<strong>STRLEN</strong> key<br>\nsummary: Get the length of the value stored in a key<br>\nsince: 2.2.0 <br>\n<br>\n","connection":"<strong>AUTH</strong> password<br>\nsummary: Authenticate to the server<br>\nsince: 1.0.0 <br>\n<br>\n<strong>ECHO</strong> message<br>\nsummary: Echo the given string<br>\nsince: 1.0.0 <br>\n<br>\n<strong>PING</strong> -<br>\nsummary: Ping the server<br>\nsince: 1.0.0 <br>\n<br>\n<strong>QUIT</strong> -<br>\nsummary: Close the connection<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SELECT</strong> index<br>\nsummary: Change the selected database for the current connection<br>\nsince: 1.0.0 <br>\n<br>\n","server":"<strong>BGREWRITEAOF</strong> -<br>\nsummary: Asynchronously rewrite the append-only file<br>\nsince: 1.0.0 <br>\n<br>\n<strong>BGSAVE</strong> -<br>\nsummary: Asynchronously save the dataset to disk<br>\nsince: 1.0.0 <br>\n<br>\n<strong>CLIENT GETNAME</strong> -<br>\nsummary: Get the current connection name<br>\nsince: 2.6.9 <br>\n<br>\n<strong>CLIENT KILL</strong> ip:port<br>\nsummary: Kill the connection of a client<br>\nsince: 2.4.0 <br>\n<br>\n<strong>CLIENT LIST</strong> -<br>\nsummary: Get the list of client connections<br>\nsince: 2.4.0 <br>\n<br>\n<strong>CLIENT SETNAME</strong> connection-name<br>\nsummary: Set the current connection name<br>\nsince: 2.6.9 <br>\n<br>\n<strong>CONFIG GET</strong> parameter<br>\nsummary: Get the value of a configuration parameter<br>\nsince: 2.0.0 <br>\n<br>\n<strong>CONFIG RESETSTAT</strong> -<br>\nsummary: Reset the stats returned by INFO<br>\nsince: 2.0.0 <br>\n<br>\n<strong>CONFIG SET</strong> parameter value<br>\nsummary: Set a configuration parameter to the given value<br>\nsince: 2.0.0 <br>\n<br>\n<strong>DBSIZE</strong> -<br>\nsummary: Return the number of keys in the selected database<br>\nsince: 1.0.0 <br>\n<br>\n<strong>DEBUG OBJECT</strong> key<br>\nsummary: Get debugging information about a key<br>\nsince: 1.0.0 <br>\n<br>\n<strong>DEBUG SEGFAULT</strong> -<br>\nsummary: Make the server crash<br>\nsince: 1.0.0 <br>\n<br>\n<strong>FLUSHALL</strong> -<br>\nsummary: Remove all keys from all databases<br>\nsince: 1.0.0 <br>\n<br>\n<strong>FLUSHDB</strong> -<br>\nsummary: Remove all keys from the current database<br>\nsince: 1.0.0 <br>\n<br>\n<strong>INFO</strong> [section]<br>\nsummary: Get information and statistics about the server<br>\nsince: 1.0.0 <br>\n<br>\n<strong>LASTSAVE</strong> -<br>\nsummary: Get the UNIX time stamp of the last successful save to disk<br>\nsince: 1.0.0 <br>\n<br>\n<strong>MONITOR</strong> -<br>\nsummary: Listen for all requests received by the server in real time<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SAVE</strong> -<br>\nsummary: Synchronously save the dataset to disk<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SHUTDOWN</strong> [NOSAVE] [SAVE]<br>\nsummary: Synchronously save the dataset to disk and then shut down the server<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SLAVEOF</strong> host port<br>\nsummary: Make the server a slave of another instance, or promote it as master<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SLOWLOG</strong> subcommand [argument]<br>\nsummary: Manages the Redis slow queries log<br>\nsince: 2.2.12 <br>\n<br>\n<strong>SYNC</strong> -<br>\nsummary: Internal command used for replication<br>\nsince: 1.0.0 <br>\n<br>\n<strong>TIME</strong> -<br>\nsummary: Return the current server time<br>\nsince: 2.6.0 <br>\n<br>\n","list":"<strong>BLPOP</strong> key [key ...] timeout<br>\nsummary: Remove and get the first element in a list, or block until one is available<br>\nsince: 2.0.0 <br>\n<br>\n<strong>BRPOP</strong> key [key ...] timeout<br>\nsummary: Remove and get the last element in a list, or block until one is available<br>\nsince: 2.0.0 <br>\n<br>\n<strong>BRPOPLPUSH</strong> source destination timeout<br>\nsummary: Pop a value from a list, push it to another list and return it; or block until one is available<br>\nsince: 2.2.0 <br>\n<br>\n<strong>LINDEX</strong> key index<br>\nsummary: Get an element from a list by its index<br>\nsince: 1.0.0 <br>\n<br>\n<strong>LINSERT</strong> key BEFORE|AFTER pivot value<br>\nsummary: Insert an element before or after another element in a list<br>\nsince: 2.2.0 <br>\n<br>\n<strong>LLEN</strong> key<br>\nsummary: Get the length of a list<br>\nsince: 1.0.0 <br>\n<br>\n<strong>LPOP</strong> key<br>\nsummary: Remove and get the first element in a list<br>\nsince: 1.0.0 <br>\n<br>\n<strong>LPUSH</strong> key value [value ...]<br>\nsummary: Prepend one or multiple values to a list<br>\nsince: 1.0.0 <br>\n<br>\n<strong>LPUSHX</strong> key value<br>\nsummary: Prepend a value to a list, only if the list exists<br>\nsince: 2.2.0 <br>\n<br>\n<strong>LRANGE</strong> key start stop<br>\nsummary: Get a range of elements from a list<br>\nsince: 1.0.0 <br>\n<br>\n<strong>LREM</strong> key count value<br>\nsummary: Remove elements from a list<br>\nsince: 1.0.0 <br>\n<br>\n<strong>LSET</strong> key index value<br>\nsummary: Set the value of an element in a list by its index<br>\nsince: 1.0.0 <br>\n<br>\n<strong>LTRIM</strong> key start stop<br>\nsummary: Trim a list to the specified range<br>\nsince: 1.0.0 <br>\n<br>\n<strong>RPOP</strong> key<br>\nsummary: Remove and get the last element in a list<br>\nsince: 1.0.0 <br>\n<br>\n<strong>RPOPLPUSH</strong> source destination<br>\nsummary: Remove the last element in a list, append it to another list and return it<br>\nsince: 1.2.0 <br>\n<br>\n<strong>RPUSH</strong> key value [value ...]<br>\nsummary: Append one or multiple values to a list<br>\nsince: 1.0.0 <br>\n<br>\n<strong>RPUSHX</strong> key value<br>\nsummary: Append a value to a list, only if the list exists<br>\nsince: 2.2.0 <br>\n<br>\n","generic":"<strong>DEL</strong> key [key ...]<br>\nsummary: Delete a key<br>\nsince: 1.0.0 <br>\n<br>\n<strong>DUMP</strong> key<br>\nsummary: Return a serialized version of the value stored at the specified key.<br>\nsince: 2.6.0 <br>\n<br>\n<strong>EXISTS</strong> key<br>\nsummary: Determine if a key exists<br>\nsince: 1.0.0 <br>\n<br>\n<strong>EXPIRE</strong> key seconds<br>\nsummary: Set a key's time to live in seconds<br>\nsince: 1.0.0 <br>\n<br>\n<strong>EXPIREAT</strong> key timestamp<br>\nsummary: Set the expiration for a key as a UNIX timestamp<br>\nsince: 1.2.0 <br>\n<br>\n<strong>KEYS</strong> pattern<br>\nsummary: Find all keys matching the given pattern<br>\nsince: 1.0.0 <br>\n<br>\n<strong>MIGRATE</strong> host port key destination-db timeout<br>\nsummary: Atomically transfer a key from a Redis instance to another one.<br>\nsince: 2.6.0 <br>\n<br>\n<strong>MOVE</strong> key db<br>\nsummary: Move a key to another database<br>\nsince: 1.0.0 <br>\n<br>\n<strong>OBJECT</strong> subcommand [arguments [arguments ...]]<br>\nsummary: Inspect the internals of Redis objects<br>\nsince: 2.2.3 <br>\n<br>\n<strong>PERSIST</strong> key<br>\nsummary: Remove the expiration from a key<br>\nsince: 2.2.0 <br>\n<br>\n<strong>PEXPIRE</strong> key milliseconds<br>\nsummary: Set a key's time to live in milliseconds<br>\nsince: 2.6.0 <br>\n<br>\n<strong>PEXPIREAT</strong> key milliseconds-timestamp<br>\nsummary: Set the expiration for a key as a UNIX timestamp specified in milliseconds<br>\nsince: 2.6.0 <br>\n<br>\n<strong>PTTL</strong> key<br>\nsummary: Get the time to live for a key in milliseconds<br>\nsince: 2.6.0 <br>\n<br>\n<strong>RANDOMKEY</strong> -<br>\nsummary: Return a random key from the keyspace<br>\nsince: 1.0.0 <br>\n<br>\n<strong>RENAME</strong> key newkey<br>\nsummary: Rename a key<br>\nsince: 1.0.0 <br>\n<br>\n<strong>RENAMENX</strong> key newkey<br>\nsummary: Rename a key, only if the new key does not exist<br>\nsince: 1.0.0 <br>\n<br>\n<strong>RESTORE</strong> key ttl serialized-value<br>\nsummary: Create a key using the provided serialized value, previously obtained using DUMP.<br>\nsince: 2.6.0 <br>\n<br>\n<strong>SORT</strong> key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]<br>\nsummary: Sort the elements in a list, set or sorted set<br>\nsince: 1.0.0 <br>\n<br>\n<strong>TTL</strong> key<br>\nsummary: Get the time to live for a key<br>\nsince: 1.0.0 <br>\n<br>\n<strong>TYPE</strong> key<br>\nsummary: Determine the type stored at key<br>\nsince: 1.0.0 <br>\n<br>\n","transactions":"<strong>DISCARD</strong> -<br>\nsummary: Discard all commands issued after MULTI<br>\nsince: 2.0.0 <br>\n<br>\n<strong>EXEC</strong> -<br>\nsummary: Execute all commands issued after MULTI<br>\nsince: 1.2.0 <br>\n<br>\n<strong>MULTI</strong> -<br>\nsummary: Mark the start of a transaction block<br>\nsince: 1.2.0 <br>\n<br>\n<strong>UNWATCH</strong> -<br>\nsummary: Forget about all watched keys<br>\nsince: 2.2.0 <br>\n<br>\n<strong>WATCH</strong> key [key ...]<br>\nsummary: Watch the given keys to determine execution of the MULTI/EXEC block<br>\nsince: 2.2.0 <br>\n<br>\n","scripting":"<strong>EVAL</strong> script numkeys key [key ...] arg [arg ...]<br>\nsummary: Execute a Lua script server side<br>\nsince: 2.6.0 <br>\n<br>\n<strong>EVALSHA</strong> sha1 numkeys key [key ...] arg [arg ...]<br>\nsummary: Execute a Lua script server side<br>\nsince: 2.6.0 <br>\n<br>\n<strong>SCRIPT EXISTS</strong> script [script ...]<br>\nsummary: Check existence of scripts in the script cache.<br>\nsince: 2.6.0 <br>\n<br>\n<strong>SCRIPT FLUSH</strong> -<br>\nsummary: Remove all the scripts from the script cache.<br>\nsince: 2.6.0 <br>\n<br>\n<strong>SCRIPT KILL</strong> -<br>\nsummary: Kill the script currently in execution.<br>\nsince: 2.6.0 <br>\n<br>\n<strong>SCRIPT LOAD</strong> script<br>\nsummary: Load the specified Lua script into the script cache.<br>\nsince: 2.6.0 <br>\n<br>\n","hash":"<strong>HDEL</strong> key field [field ...]<br>\nsummary: Delete one or more hash fields<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HEXISTS</strong> key field<br>\nsummary: Determine if a hash field exists<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HGET</strong> key field<br>\nsummary: Get the value of a hash field<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HGETALL</strong> key<br>\nsummary: Get all the fields and values in a hash<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HINCRBY</strong> key field increment<br>\nsummary: Increment the integer value of a hash field by the given number<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HINCRBYFLOAT</strong> key field increment<br>\nsummary: Increment the float value of a hash field by the given amount<br>\nsince: 2.6.0 <br>\n<br>\n<strong>HKEYS</strong> key<br>\nsummary: Get all the fields in a hash<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HLEN</strong> key<br>\nsummary: Get the number of fields in a hash<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HMGET</strong> key field [field ...]<br>\nsummary: Get the values of all the given hash fields<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HMSET</strong> key field value [field value ...]<br>\nsummary: Set multiple hash fields to multiple values<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HSET</strong> key field value<br>\nsummary: Set the string value of a hash field<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HSETNX</strong> key field value<br>\nsummary: Set the value of a hash field, only if the field does not exist<br>\nsince: 2.0.0 <br>\n<br>\n<strong>HVALS</strong> key<br>\nsummary: Get all the values in a hash<br>\nsince: 2.0.0 <br>\n<br>\n","pubsub":"<strong>PSUBSCRIBE</strong> pattern [pattern ...]<br>\nsummary: Listen for messages published to channels matching the given patterns<br>\nsince: 2.0.0 <br>\n<br>\n<strong>PUBLISH</strong> channel message<br>\nsummary: Post a message to a channel<br>\nsince: 2.0.0 <br>\n<br>\n<strong>PUNSUBSCRIBE</strong> [pattern [pattern ...]]<br>\nsummary: Stop listening for messages posted to channels matching the given patterns<br>\nsince: 2.0.0 <br>\n<br>\n<strong>SUBSCRIBE</strong> channel [channel ...]<br>\nsummary: Listen for messages published to the given channels<br>\nsince: 2.0.0 <br>\n<br>\n<strong>UNSUBSCRIBE</strong> [channel [channel ...]]<br>\nsummary: Stop listening for messages posted to the given channels<br>\nsince: 2.0.0 <br>\n<br>\n","set":"<strong>SADD</strong> key member [member ...]<br>\nsummary: Add one or more members to a set<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SCARD</strong> key<br>\nsummary: Get the number of members in a set<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SDIFF</strong> key [key ...]<br>\nsummary: Subtract multiple sets<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SDIFFSTORE</strong> destination key [key ...]<br>\nsummary: Subtract multiple sets and store the resulting set in a key<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SINTER</strong> key [key ...]<br>\nsummary: Intersect multiple sets<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SINTERSTORE</strong> destination key [key ...]<br>\nsummary: Intersect multiple sets and store the resulting set in a key<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SISMEMBER</strong> key member<br>\nsummary: Determine if a given value is a member of a set<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SMEMBERS</strong> key<br>\nsummary: Get all the members in a set<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SMOVE</strong> source destination member<br>\nsummary: Move a member from one set to another<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SPOP</strong> key<br>\nsummary: Remove and return a random member from a set<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SRANDMEMBER</strong> key [count]<br>\nsummary: Get one or multiple random members from a set<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SREM</strong> key member [member ...]<br>\nsummary: Remove one or more members from a set<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SUNION</strong> key [key ...]<br>\nsummary: Add multiple sets<br>\nsince: 1.0.0 <br>\n<br>\n<strong>SUNIONSTORE</strong> destination key [key ...]<br>\nsummary: Add multiple sets and store the resulting set in a key<br>\nsince: 1.0.0 <br>\n<br>\n","sorted_set":"<strong>ZADD</strong> key score member [score member ...]<br>\nsummary: Add one or more members to a sorted set, or update its score if it already exists<br>\nsince: 1.2.0 <br>\n<br>\n<strong>ZCARD</strong> key<br>\nsummary: Get the number of members in a sorted set<br>\nsince: 1.2.0 <br>\n<br>\n<strong>ZCOUNT</strong> key min max<br>\nsummary: Count the members in a sorted set with scores within the given values<br>\nsince: 2.0.0 <br>\n<br>\n<strong>ZINCRBY</strong> key increment member<br>\nsummary: Increment the score of a member in a sorted set<br>\nsince: 1.2.0 <br>\n<br>\n<strong>ZINTERSTORE</strong> destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]<br>\nsummary: Intersect multiple sorted sets and store the resulting sorted set in a new key<br>\nsince: 2.0.0 <br>\n<br>\n<strong>ZRANGE</strong> key start stop [WITHSCORES]<br>\nsummary: Return a range of members in a sorted set, by index<br>\nsince: 1.2.0 <br>\n<br>\n<strong>ZRANGEBYSCORE</strong> key min max [WITHSCORES] [LIMIT offset count]<br>\nsummary: Return a range of members in a sorted set, by score<br>\nsince: 1.0.5 <br>\n<br>\n<strong>ZRANK</strong> key member<br>\nsummary: Determine the index of a member in a sorted set<br>\nsince: 2.0.0 <br>\n<br>\n<strong>ZREM</strong> key member [member ...]<br>\nsummary: Remove one or more members from a sorted set<br>\nsince: 1.2.0 <br>\n<br>\n<strong>ZREMRANGEBYRANK</strong> key start stop<br>\nsummary: Remove all members in a sorted set within the given indexes<br>\nsince: 2.0.0 <br>\n<br>\n<strong>ZREMRANGEBYSCORE</strong> key min max<br>\nsummary: Remove all members in a sorted set within the given scores<br>\nsince: 1.2.0 <br>\n<br>\n<strong>ZREVRANGE</strong> key start stop [WITHSCORES]<br>\nsummary: Return a range of members in a sorted set, by index, with scores ordered from high to low<br>\nsince: 1.2.0 <br>\n<br>\n<strong>ZREVRANGEBYSCORE</strong> key max min [WITHSCORES] [LIMIT offset count]<br>\nsummary: Return a range of members in a sorted set, by score, with scores ordered from high to low<br>\nsince: 2.2.0 <br>\n<br>\n<strong>ZREVRANK</strong> key member<br>\nsummary: Determine the index of a member in a sorted set, with scores ordered from high to low<br>\nsince: 2.0.0 <br>\n<br>\n<strong>ZSCORE</strong> key member<br>\nsummary: Get the score associated with the given member in a sorted set<br>\nsince: 1.2.0 <br>\n<br>\n"}
